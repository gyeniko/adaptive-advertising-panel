# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ad_panel_controller.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from upload_image import Ui_Upload_Image_Window
from delete_detail_window import Ui_Dialog
from change_ads_window import Ui_Change_Ads_Window
import sqlite3
from PyQt5.QtCore import Qt

class Ui_all_ads_MainWindow(object):


    def setupUi(self, all_ads_MainWindow):
        #buttons_style = "QPushButton {background-color: rgb(123, 175, 212)} QPushButton:hover{background-color: rgb(130, 180, 212)}"

        all_ads_MainWindow.setObjectName("all_ads_MainWindow")
        all_ads_MainWindow.resize(1280, 720)
        all_ads_MainWindow.setStyleSheet("QMainWindow {background-color:rgb(247,243,243);} ")
        self.centralwidget = QtWidgets.QWidget(all_ads_MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("QPushButton {color: #a86777; font-weight:600; background-color: #ffffff; border: 3px solid #a86777; border-radius:20px;} QPushButton:hover{color: #ffffff; background-color: #a86777;}")
        #self.change_pushButton = QtWidgets.QPushButton(self.centralwidget)
        #self.change_pushButton.setGeometry(QtCore.QRect(180, 600, 93, 28))
        #self.change_pushButton.setObjectName("change_pushButton")
        self.delete_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.delete_pushButton.setGeometry(QtCore.QRect(240, 600, 120, 40))
        self.delete_pushButton.setObjectName("delete_pushButton")
        #self.delete_pushButton.setStyleSheet(buttons_style)

        self.upload_new_ads_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.upload_new_ads_pushButton.setGeometry(QtCore.QRect(30, 600, 200, 40))
        self.upload_new_ads_pushButton.setObjectName("upload_new_ads_pushButton")
        #self.upload_new_ads_pushButton.setStyleSheet(buttons_style)


        self.title_label = QtWidgets.QLabel(self.centralwidget)
        self.title_label.setGeometry(QtCore.QRect(30, 30, 381, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(30, 60, 1211, 521))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setStyleSheet("QTableWidget { selection-color: #ffffff; selection-background-color:#a86777;} QHeaderView{selection-background-color:#a86777;} QHeaderView::section{ background-color: #c18997; color: #ffffff; }")



        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(138,64,82))
        self.tableWidget.setHorizontalHeaderItem(0, item)

        self.tableWidget.setColumnWidth(0,380)
        item = QtWidgets.QTableWidgetItem()

        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.tableWidget.setColumnWidth(1,150)
        item = QtWidgets.QTableWidgetItem()

        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.tableWidget.setColumnWidth(2,220)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.setColumnWidth(3,220)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.tableWidget.setColumnWidth(4,220)



        self.error_label = QtWidgets.QLabel(self.centralwidget)
        self.error_label.setGeometry(QtCore.QRect(380, 600, 271, 40))
        self.error_label.setText("")
        self.error_label.setObjectName("error_label")
        self.error_label.setStyleSheet("color: rgb(227, 0, 4)")
        all_ads_MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(all_ads_MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        all_ads_MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(all_ads_MainWindow)
        self.statusbar.setObjectName("statusbar")
        all_ads_MainWindow.setStatusBar(self.statusbar)
        self.new_ads_upload_Action = QtWidgets.QAction(all_ads_MainWindow)
        self.new_ads_upload_Action.setObjectName("new_ads_upload_Action")
        self.previous_upload_ads_Action = QtWidgets.QAction(all_ads_MainWindow)
        self.previous_upload_ads_Action.setEnabled(True)
        self.previous_upload_ads_Action.setObjectName("previous_upload_ads_Action")

        #click button
        self.upload_new_ads_pushButton.clicked.connect(self.click_upload_new_ads_button)
        self.delete_pushButton.clicked.connect(self.click_delete_ads_button)
        #self.change_pushButton.clicked.connect(self.click_change_ads_button)

        self.load_ads_data_to_table()

        self.retranslateUi(all_ads_MainWindow)
        QtCore.QMetaObject.connectSlotsByName(all_ads_MainWindow)

    def retranslateUi(self, all_ads_MainWindow):
        _translate = QtCore.QCoreApplication.translate
        all_ads_MainWindow.setWindowTitle(_translate("all_ads_MainWindow", "Hirdetéspanel vezérlő"))
        #self.change_pushButton.setText(_translate("all_ads_MainWindow", "Szerkesztés"))
        self.delete_pushButton.setText(_translate("all_ads_MainWindow", "Törlés"))
        self.upload_new_ads_pushButton.setText(_translate("all_ads_MainWindow", "Új hirdetés feltöltése"))
        self.title_label.setText(_translate("all_ads_MainWindow", "Feltöltött hirdetéseim"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("all_ads_MainWindow", "Elnevezés"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("all_ads_MainWindow", "Feltöltés időpontja"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("all_ads_MainWindow", "Nem"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("all_ads_MainWindow", "Kor"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("all_ads_MainWindow", "Érzelem"))
        self.new_ads_upload_Action.setText(_translate("all_ads_MainWindow", "Új hirdetés feltöltése"))
        self.previous_upload_ads_Action.setText(_translate("all_ads_MainWindow", "Feltöltött hirdetéseim"))

    def load_ads_data_to_table(self):
        conn = sqlite3.connect('picturesdatabase.db')
        cursor = conn.cursor()

        cursor.execute('''SELECT 
                                ad_name, 
                                upload_date, 
                                female, 
                                male, 
                                child, 
                                young_adult, 
                                middle_aged, 
                                elderly, 
                                happy, 
                                neutral, 
                                sad,
                                id  
                                FROM images ORDER BY ad_name ASC''')
        data = cursor.fetchall()

        # Beállítja a táblát a sorok és oszlopok számának megfelelően
        self.tableWidget.setRowCount(len(data))

        # Betölti az adatokat a táblába
        for row_num, row_data in enumerate(data):
            row_data_ls = []
            gender = ""
            age = ""
            emotion = ""
            id = ""
            for db_col_num, cell_data in enumerate(row_data):
                if db_col_num <= 1:
                    row_data_ls.append(str(cell_data))
                elif db_col_num == 2 and cell_data == 1:
                    gender += "nő, "
                elif db_col_num == 3 and cell_data == 1:
                    gender += "férfi, "
                elif db_col_num == 4 and cell_data == 1:
                    age += "gyerek, "
                elif db_col_num == 5 and cell_data == 1:
                    age += "fiatal felnőtt, "
                elif db_col_num == 6 and cell_data == 1:
                    age += "középkorú, "
                elif db_col_num == 7 and cell_data == 1:
                    age += "idős, "
                elif db_col_num == 8 and cell_data == 1:
                    emotion += "boldog, "
                elif db_col_num == 9 and cell_data == 1:
                    emotion += "semleges, "
                elif db_col_num == 10 and cell_data == 1:
                    emotion += "szomorú, "
                elif db_col_num == 11:
                    id = cell_data

            gender = gender[:-2]
            row_data_ls.append(gender)
            age = age[:-2]
            row_data_ls.append(age)
            emotion = emotion[:-2]
            row_data_ls.append(emotion)

            for col_num in range(len(row_data_ls)):
                item = QtWidgets.QTableWidgetItem(row_data_ls[col_num])
                item.setData(Qt.UserRole, id)  # database id connect to row
                self.tableWidget.setItem(row_num, col_num, item)

        conn.close()

    def click_upload_new_ads_button(self):
        upload_image_window = Upload_ads_dialog()
        upload_image_window.exec()
        self.load_ads_data_to_table()

    """
    def click_change_ads_button(self):
        selected_ads = self.tableWidget.selectedItems()
        columns_count = self.tableWidget.columnCount()

        if not selected_ads:
            self.error_label.setText("Jelölje ki a módosítani kívánt hirdetést!")
            return

        if len(selected_ads) > columns_count:
            self.error_label.setText("Egyszerre csak egy hirdetést lehet módosítani.")
            return

        self.error_label.setText("")
        ads_id = selected_ads[0].data(Qt.UserRole)
        change_ads_window = Change_Ads_Window()
        change_ads_window.exec()"""

    def click_delete_ads_button(self):
        selected_ads = self.tableWidget.selectedItems()

        if not selected_ads:
            self.error_label.setText("Jelölje ki, mely hírdetéseket szeretné törölni!")
            return

        self.error_label.setText("")

        delete_image_window = Delete_ads_Dialog()
        result = delete_image_window.exec()

        if result == QtWidgets.QDialog.Rejected:
            return
        elif result == QtWidgets.QDialog.Accepted:
            #Connect database
            conn = sqlite3.connect('picturesdatabase.db')
            cursor = conn.cursor()

            columns_count = self.tableWidget.columnCount()
            for row_num in range(0,len(selected_ads),columns_count):
                ads_id = selected_ads[row_num].data(Qt.UserRole)
                delete_statement = "DELETE FROM images WHERE id = " + str(ads_id)
                cursor.execute(delete_statement)
                print(ads_id)

            conn.commit()
            conn.close()
            self.load_ads_data_to_table()




class Upload_ads_dialog(QtWidgets.QDialog, Ui_Upload_Image_Window):
    def __init__(self, parent=None):
        super(Upload_ads_dialog, self).__init__(parent)
        self.setupUi(self)

class Delete_ads_Dialog(QtWidgets.QDialog, Ui_Dialog):
    def __init__(self, parent=None):
        super(Delete_ads_Dialog, self).__init__(parent)
        self.setupUi(self)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    all_ads_MainWindow = QtWidgets.QMainWindow()
    ui = Ui_all_ads_MainWindow()
    ui.setupUi(all_ads_MainWindow)
    all_ads_MainWindow.show()
    sys.exit(app.exec_())
